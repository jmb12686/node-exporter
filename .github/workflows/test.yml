name: test

on:
  pull_request:
    branches: master
  push:
    branches: master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      -
        name: Prepare
        id: prepare
        run: |
          echo ::set-output name=build_tag::test
          echo ::set-output name=container_name::node-exporter
          echo ::set-output name=running_timeout::60
          echo ::set-output name=running_log_check::Listening on
      -
        # https://github.com/actions/checkout
        name: Checkout
        uses: actions/checkout@v1
      -
        # https://github.com/crazy-max/ghaction-docker-buildx
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      -
        name: Docker Buildx
        run: |
          docker buildx build --load --tag ${{ steps.prepare.outputs.build_tag }} --file Dockerfile .
      -
        name: Start container
        run: |
          docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
          docker run -d --name ${{ steps.prepare.outputs.container_name }} \
          -v /proc:/host/proc:ro \
          -v /sys:/host/sys:ro \
          -v /:/rootfs:ro \
          -v /etc/hostname:/etc/nodename:ro \
          ${{ steps.prepare.outputs.build_tag }} '--path.sysfs=/host/sys' '--path.procfs=/host/proc' '--path.rootfs=/rootfs' '--collector.textfile.directory=/etc/node-exporter/' '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)' '--no-collector.ipvs'
      -
        name: Test run
        run: |
          TIMEOUT=$((SECONDS + ${{ steps.prepare.outputs.running_timeout }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ steps.prepare.outputs.running_log_check }}"* ]]; then
              echo "Container up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "ERROR: Failed to run ${{ steps.prepare.outputs.container_name }} container"
              docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
              exit 1
            fi
          done < <(docker logs -f ${{ steps.prepare.outputs.container_name }} 2>&1)

          CONTAINER_STATUS=$(docker container inspect --format "{{.State.Status}}" ${{ steps.prepare.outputs.container_name }})
          if [[ ${CONTAINER_STATUS} != "running" ]]; then
            >&2 echo "ERROR: Container ${{ steps.prepare.outputs.container_name }} returned status '$CONTAINER_STATUS'"
            docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
            exit 1
          fi
          docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
          echo
